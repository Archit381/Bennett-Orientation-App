var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import * as React from 'react';
import handleChildrenTransitions from './children';
var Transition = (function (_super) {
    __extends(Transition, _super);
    function Transition() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            children: [],
            leaving: {},
            hasMounted: false,
            scheduleChildRemoval: function (key) { return _this.removeChild(key); }
        };
        return _this;
    }
    Transition.prototype.removeChild = function (key) {
        var _a = this.state, children = _a.children, leaving = _a.leaving;
        var _b = this.props, enterAfterExit = _b.enterAfterExit, onRest = _b.onRest;
        if (!leaving.hasOwnProperty(key))
            return;
        leaving[key] = true;
        if (!Object.keys(leaving).every(function (leavingKey) { return leaving[leavingKey]; })) {
            return;
        }
        var targetChildren = children.filter(function (child) { return !leaving.hasOwnProperty(child.key); });
        var newState = enterAfterExit
            ? __assign({ leaving: {} }, handleChildrenTransitions(__assign({}, this.props, { enterAfterExit: false }), __assign({}, this.state, { children: targetChildren }))) : {
            leaving: {},
            children: targetChildren
        };
        this.setState(newState, onRest);
    };
    Transition.prototype.render = function () {
        return this.state.children;
    };
    Transition.defaultProps = {
        preEnterPose: 'exit',
        enterPose: 'enter',
        exitPose: 'exit',
        animateOnMount: false,
        enterAfterExit: false,
        popFromLayoutOnExit: false
    };
    Transition.getDerivedStateFromProps = handleChildrenTransitions;
    return Transition;
}(React.Component));
export default Transition;
//# sourceMappingURL=index.js.map