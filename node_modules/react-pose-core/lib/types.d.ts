import { Animated } from 'react-native';
import { ReactNode } from 'react';
import { AnimatedPoser, AnimatedPoseConfig } from 'animated-pose';
export declare type PosedComponent = (config: AnimatedPoseConfig) => ReactNode;
export declare type PosedComponentFactory = (Component: any) => PosedComponent;
export declare type Posed = any;
export declare type Props = {
    [key: string]: any;
};
export declare type PoseContextProps = {
    registerAsChild: (props: AnimatedPoseConfig) => AnimatedPoser;
    onUnmount: (child: AnimatedPoser) => void;
};
export declare type PoseComponentProps = {
    withParent?: boolean;
    pose?: CurrentPose;
    initialPose?: CurrentPose;
    children?: React.ReactNode | ChildAsFunction;
    onPoseComplete?: (pose: CurrentPose) => any;
    poseKey?: any;
    popFromLayout?: boolean;
    [key: string]: any;
};
export declare type ValueMap = {
    [key: string]: Animated.Value;
};
export declare type CurrentPose = string | string[];
export declare type ChildAsFunction = (values: ValueMap) => ReactNode;
export declare type Layout = {
    x: number;
    y: number;
    height: number;
    width: number;
};
export declare type PosedComponentFactoryConfig = {
    componentMap: {
        [key: string]: React.Component;
    };
    poseFactory: any;
    createAnimatedComponent: (component: React.Component) => React.Component;
    filterConfig: (config: AnimatedPoseConfig) => AnimatedPoseConfig;
    transformConfig: (config: AnimatedPoseConfig, props: PoseComponentProps) => void;
    getProps: (poser: AnimatedPoser, config: AnimatedPoseConfig, props: PoseComponentProps, setLayout: (layout: Layout) => void) => Props;
    getStylesFromPoser: (poser: AnimatedPoser) => {
        [key: string]: any;
    };
};
