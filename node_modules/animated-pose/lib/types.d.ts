import { Poser, PoserConfig } from 'pose-core';
import { Animated } from 'react-native';
export declare type Interpolation = {
    inputRange: number[];
    outputRange: string[] | number[];
};
export declare type Value = {
    raw?: Animated.Value;
    interpolation?: Animated.AnimatedInterpolation;
    useNativeDriver?: boolean;
};
export declare type Action = Animated.CompositeAnimation;
export interface AnimatedPoser extends Poser<Value, Action, Action, AnimatedPoser> {
    addChild: (config: AnimatedPoseConfig) => AnimatedPoser;
    flip: (prev: Layout, next: Layout) => void;
}
export declare type TransitionProps = {
    value: Animated.Value;
    toValue: number;
    [key: string]: any;
};
export declare type Transition = ({ value, toValue }: TransitionProps) => false | Animated.CompositeAnimation;
export declare type CreateValueProps = {
    passiveParent?: Value;
    passiveProps?: Interpolation;
    passiveParentKey?: string;
};
export declare type AnimatedPoseConfig = PoserConfig<Value>;
export declare type AnimatedFactoryConfig = {
    convertUnitToPoints: (v: string) => number;
    unitConverters: UnitConverterMap;
};
export declare type AnimatedPoserFactory = (config: AnimatedPoseConfig) => Poser<Value, Action, Action, AnimatedPoser>;
export declare type UnitConverter = (v: number) => number;
export declare type DimensionConverterFactory = (viewport: 'window' | 'screen', axis: 'width' | 'height') => UnitConverter;
export declare type UnitConverterMap = {
    [key: string]: UnitConverter;
};
export declare type Layout = {
    x: number;
    y: number;
    width: number;
    height: number;
};
