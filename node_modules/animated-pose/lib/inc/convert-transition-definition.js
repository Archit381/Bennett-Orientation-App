var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import { Animated } from 'react-native';
import { linear, easeIn, easeOut, easeInOut, cubicBezier, circIn, circOut, circInOut, backIn, backOut, backInOut, anticipate } from '@popmotion/easing';
import { invariant } from 'hey-listen';
var spring = Animated.spring, timing = Animated.timing, loopTransition = Animated.loop, sequence = Animated.sequence;
var easingLookup = {
    linear: linear,
    easeIn: easeIn,
    easeOut: easeOut,
    easeInOut: easeInOut,
    circIn: circIn,
    circOut: circOut,
    circInOut: circInOut,
    backIn: backIn,
    backOut: backOut,
    backInOut: backInOut,
    anticipate: anticipate
};
var convertEasing = function (easing) {
    if (easing === void 0) { easing = easeOut; }
    if (typeof easing === 'string') {
        invariant(easingLookup[easing] !== undefined, "Invalid easing type '" + easing + "'. popmotion.io/pose/api/config");
        return easingLookup[easing];
    }
    else if (Array.isArray(easing)) {
        invariant(easing.length === 4, 'Cubic bezier arrays must contain four numerical values.');
        var x1 = easing[0], y1 = easing[1], x2 = easing[2], y2 = easing[3];
        return cubicBezier(x1, y1, x2, y2);
    }
    return easing;
};
var defaultEasings = function (num, defaultEasing) {
    return Array.from(new Array(num), function () { return defaultEasing || 'easeOut'; });
};
var defaultTimings = function (num) {
    return Array.from(new Array(num), function (_, i) { return (i !== 0 ? i / (num - 1) : 0); });
};
var createTransition = {
    spring: function (value, _a) {
        var restDelta = _a.restDelta, restSpeed = _a.restSpeed, props = __rest(_a, ["restDelta", "restSpeed"]);
        return spring(value, __assign({ restDisplacementThreshold: restDelta, restSpeedThreshold: restSpeed }, props));
    },
    tween: function (value, _a) {
        var ease = _a.ease, props = __rest(_a, ["ease"]);
        return timing(value, __assign({ easing: convertEasing(ease) }, props));
    },
    keyframes: function (value, _a) {
        var values = _a.values, easings = _a.easings, _b = _a.duration, duration = _b === void 0 ? 300 : _b, times = _a.times, props = __rest(_a, ["values", "easings", "duration", "times"]);
        var numValues = values.length;
        var calculatedEasings = Array.isArray(easings)
            ? easings
            : defaultEasings(numValues, easings);
        var calculatedTimings = times || defaultTimings(numValues);
        return sequence(values.reduce(function (animations, toValue, i) {
            if (toValue !== undefined) {
                var iPrev = i - 1;
                var animation = createTransition.tween(value, __assign({}, props, { duration: i !== 0
                        ? (calculatedTimings[i] - calculatedTimings[iPrev]) * duration
                        : 0, ease: calculatedEasings[iPrev], delay: i === 1 ? calculatedTimings[0] * duration : 0, toValue: toValue }));
                animations.push(animation);
            }
            return animations;
        }, []));
    }
};
export default (function (value, _a) {
    var _b = _a.type, type = _b === void 0 ? 'tween' : _b, _c = _a.loop, loop = _c === void 0 ? 0 : _c, props = __rest(_a, ["type", "loop"]);
    invariant(createTransition[type] !== undefined, "Invalid animation type '" + type + "' defined. Valid types are: 'tween', 'spring'");
    var transition = createTransition[type](value, props);
    if (loop) {
        transition = loopTransition(transition, { iterations: loop });
    }
    return transition;
});
//# sourceMappingURL=convert-transition-definition.js.map